
/*--------------------------------------------------------------------*/
/*------- This code was generated by Interflop Backend Adapter -------*/
/*--------------------------------------------------------------------*/


/*--------------------------------------------------------------------*/
/*--- Verrou: a FPU instrumentation tool.                          ---*/
/*--- Interface for floating-point operations overloading.         ---*/
/*---                                                 vr_fpOps.cxx ---*/
/*--------------------------------------------------------------------*/

/*
   This file is part of Verrou, a FPU instrumentation tool.

   Copyright (C) 2014-2021 EDF
     F. Févotte     <francois.fevotte@edf.fr>
     B. Lathuilière <bruno.lathuiliere@edf.fr>

   This program is free software; you can redistribute it and/or
   modify it under the terms of the GNU Lesser General Public License as
   published by the Free Software Foundation; either version 2.1 of the
   License, or (at your option) any later version.

   This program is distributed in the hope that it will be useful, but
   WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   General Public License for more details.

   You should have received a copy of the GNU Lesser General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
   02111-1307, USA.

   The GNU Lesser General Public License is contained in the file COPYING.
*/

#include "interflop_custom.h"
#include <stddef.h>
#include <limits>
#include <cmath>

#include "../interflop_verrou/vr_fma.hxx"
#include "../interflop_verrou/vr_sqrt.hxx"

custom_conf_t custom_conf;

template <typename REAL>
void ifcd_custom (const REAL & a, const REAL & b, const REAL & r);


// * Global variables & parameters

void (*custom_ifcd_denormHandler)(void)=NULL;
void (*custom_ifcd_panicHandler)(const char*)=NULL;

void custom_set_denorm_handler(void (*denormHandler)(void)){
  custom_ifcd_denormHandler=denormHandler;
}

void custom_set_panic_handler(void (*panicHandler)(const char*)){
  custom_ifcd_panicHandler=panicHandler;
}



template<class REAL>
void flushToZeroAndCheck(REAL* res){
  if( ( ((*res >= 0) ? (*res): -(*res)))   <  std::numeric_limits<REAL>::min()  && *res !=0.){
    if(custom_ifcd_denormHandler!=0){
      (*custom_ifcd_denormHandler)();
    }
    if( custom_conf.flushtozero ){
      *res=0.;
    }
  }
}



// * C interface
void IFCUSTOM_FCTNAME(configure)(custom_conf_t mode, void* context) {
  custom_conf=mode;
}

void IFCUSTOM_FCTNAME(finalize)(void* context){
}

const char* IFCUSTOM_FCTNAME(get_backend_name)() {
  return "custom";
}

const char* IFCUSTOM_FCTNAME(get_backend_version)() {
  return "1.x-dev";
}


void IFCUSTOM_FCTNAME(add_double) (double a, double b, double* res,void* context) {
  
    *res = a + b;

}

void IFCUSTOM_FCTNAME(add_float) (float a, float b, float* res,void* context) {
  
    *res = a + b;

}


void IFCUSTOM_FCTNAME(sub_double) (double a, double b, double* res,void* context) {
  
    *res = a - b;

}

void IFCUSTOM_FCTNAME(sub_float) (float a, float b, float* res,void* context) {
  
    *res = a - b;

}


void IFCUSTOM_FCTNAME(mul_double) (double a, double b, double* res,void* context) {
  
    *res = a * b;

}

void IFCUSTOM_FCTNAME(mul_float) (float a, float b, float* res,void* context) {
  
    *res = a * b;

}


void IFCUSTOM_FCTNAME(div_double) (double a, double b, double* res,void* context) {
  
    *res = a / b;

}

void IFCUSTOM_FCTNAME(div_float) (float a, float b, float* res,void* context) {
  
    *res = a / b;

}


void IFCUSTOM_FCTNAME(madd_float) (float a, float b, float c, float* res,void* context) {
  
}

void IFCUSTOM_FCTNAME(madd_double) (double a, double b, double c, double* res,void* context) {
  
}


void IFCUSTOM_FCTNAME(sqrt_float) (float a, float* res,void* context) {
  
}

void IFCUSTOM_FCTNAME(sqrt_double) (double a, double* res,void* context) {
  
}







void IFCUSTOM_FCTNAME(cast_double_to_float) (double a, float* res,void* context) {
#ifdef  IFCU_DOOP
  *res=(float)a;
#endif
  flushToZeroAndCheck(res);
}




struct interflop_backend_interface_t IFCUSTOM_FCTNAME(init)(void ** context){
  struct interflop_backend_interface_t config=interflop_backend_empty_interface;

  config.add_float = & IFCUSTOM_FCTNAME(add_float);
  config.sub_float = & IFCUSTOM_FCTNAME(sub_float);
  config.mul_float = & IFCUSTOM_FCTNAME(mul_float);
  config.div_float = & IFCUSTOM_FCTNAME(div_float);

  config.add_double = & IFCUSTOM_FCTNAME(add_double);
  config.sub_double = & IFCUSTOM_FCTNAME(sub_double);
  config.mul_double = & IFCUSTOM_FCTNAME(mul_double);
  config.div_double = & IFCUSTOM_FCTNAME(div_double);


  config.cast_double_to_float=& IFCUSTOM_FCTNAME(cast_double_to_float);

  config.madd_float = & IFCUSTOM_FCTNAME(madd_float);
  config.madd_double =& IFCUSTOM_FCTNAME(madd_double);

  config.finalize =& IFCUSTOM_FCTNAME(finalize);

  return config;
}